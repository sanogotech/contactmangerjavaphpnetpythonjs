input {
  file {
    type => "java"
    # Logstash insiste sur les chemins absolus...
    path => "D:/tmp/logs/SPRINGBOOTCONTACTMANAGER.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
}

filter {
  #Si la ligne de journal contient un caractère de tabulation suivie de 'at', nous étiqueterons cette entrée comme stacktrace
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  #Le format de journal par défaut de Grokking Spring Boot
  grok {
    match => [ "message", 
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
               "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
             ]
  }

  #Parsing out timestamps which are in timestamp field thanks to previous grok section
  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }
}

output {
  # Imprime chaque événement à stdout, utile pour le débogage. Doit être commenté dans la production.
  # L'activation du codage 'rubydebug' sur la sortie stdout rendra logstash
  # Jolie-print l'événement entier comme quelque chose de similaire à une représentation JSON.
  stdout {
    codec => rubydebug
  }

  # Envoi d'événements logs correctement analysés à la recherche élastique
  elasticsearch {
    hosts => ["localhost:9200"]
  }
}